INSERT INTO book VALUE(1, '축구는 역사', '굿스포츠', 7000);
INSERT INTO book VALUE(2, '축구아는 여자', '나무수', 13000);
INSERT INTO book VALUE(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO book VALUE(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO book VALUE(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO book VALUE(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO book VALUE(7, '야구의 추억', '이상미디어', 2000);
INSERT INTO book VALUE(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO book VALUE(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO book VALUE(10, 'Olympic Champions', 'Pearson', 13000);
INSERT INTO customer VALUES(1, '박지성', '영국 멘체스터', '000-5000-0001');
INSERT INTO customer VALUES(2, '김연아', '대한민국 서울', '000-6000-0001');
INSERT INTO customer VALUES(3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO customer VALUES(4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO customer VALUES(5, '박세리', '대한민국 대전', 'NULL');
INSERT INTO orders VALUES(1, 1, 1, 6000, STR_TO_DATE('2014-07-01', '%Y-%m-%d'));
INSERT INTO orders VALUES(2, 1, 3, 21000, STR_TO_DATE('2014-07-03', '%Y-%m-%d'));
INSERT INTO orders VALUES(3, 2, 5, 8000, STR_TO_DATE('2014-07-03', '%Y-%m-%d'));
INSERT INTO orders VALUES(4, 3, 6, 6000, STR_TO_DATE('2014-07-04', '%Y-%m-%d'));
INSERT INTO orders VALUES(5, 4, 7, 20000, STR_TO_DATE('2014-07-05', '%Y-%m-%d'));
INSERT INTO orders VALUES(6, 1, 2, 12000, STR_TO_DATE('2014-07-07', '%Y-%m-%d'));
INSERT INTO orders VALUES(7, 4, 8, 13000, STR_TO_DATE('2014-07-07', '%Y-%m-%d'));
INSERT INTO orders VALUES(8, 3, 10, 12000, STR_TO_DATE('2014-07-08', '%Y-%m-%d'));
INSERT INTO orders VALUES(9, 2, 10, 7000, STR_TO_DATE('2014-07-09', '%Y-%m-%d'));
INSERT INTO orders VALUES(10, 3, 8, 13000, STR_TO_DATE('2014-07-10', '%Y-%m-%d'));

CREATE TABLE Imported_Book(
bookid INTEGER,
bookname VARCHAR(40),
publisher VARCHAR(40),
price INTEGER
);

INSERT INTO Imported_Book VALUES(21, 'Zen Golf', 'Pearson', 12000);
INSERT INTO Imported_Book VALUES(22, 'Soccer Skills', 'Human Kinetics', 15000);
commit;

중복 제외 DISTINCT

book 이라는 관계(표)에서 가격이 10,000원 이하인 도서 목록을 검색해 보자
select bookname from book where price <= 10000;

book 이라는 관계(표)에서 가격이 7,000원 초과 10,000원 이하인 도서목록과 가격을 검색해 보자
select bookname, price from book where price <= 10000 and price >7000;

select bookname, price from book where price BETWEEN 7000 and 10000;


select bookname, price from book where bookname LIKE '%축구%';

---------------------------------------------------------------------------------------------------------------------------------
SELECT SUM(saleprice) FROM Orders ;
-orders 표에서 "saleprice" 의 합을 구함.
SELECT SUM(saleprice) AS 총매출 FROM Orders ;
-orders 표에서 "saleprice" 의 합을 구하는데 이름은 "총매출" 로 하겠다.

<GROUP BY> "속성 값이 같은 값끼리 그룹을 만들 수 있다."

고객별로 주문한 도서의 총 수량과 총 판매액 구하자
= SELECT custid, COUNT(*)  AS '총수량', SUM(saleprice) AS '총 판매액' FROM Orders GROUP BY custid;
고객별로 = GROUP BY custid
주문한    = FROM Orders
도서의 총수량 = SELECT COUNT(*) AS '총수량'
총 판매액       = SELECT SUM(saleprice)

<Having>

가격이 8000원 이상인 도서를 구매한 고객에 대하여 고객별 주문 도서의 총수량을 구하시오.
단 두 권 이상 구매한 고객만 구하시오

SELECT custid, COUNT(*) AS '총수량' FROM Orders WHERE saleprice >=8000 GROUP BY custid HAVING COUNT(*)>=2;
가격이 8000원 이상 = WHERE saleprice >=8000
도서를 구매한 = FROM Order
고객별 = GROUP BY custid
주문 도서의 총 수량 = SELECT custid, COUNT(*) AS '총수량'
단 두 권 이상 구매한 고객만 = HAVING COUNT(*)>=2

<동등 조인> 교집합만 이야기함.

3-21 질의
SELECT * FROM Customer , Orders; 
10 * 5 = 50 모든 조합의 표가 나옴 
공통 속성인 custid를 기준으로 하나 하나 조합해 의미없는 데이터가 도출됨

SELECT * FROM Customer, Orders WHERE Customer.custid =Orders.custid;
10줄의 표가 나옴.
custid를 같게 하므므로써 인물에 따른 의미 있는 데이터가 도출됨

3-22질의

SELECT * FROM Customer, Orders WHERE Customer.custid = Orders.custid ORDER BY Customer.custid;

3-23질의

SELECT name, saleprice FROM Customer, Orders WHERE Customer.custid = Orders.custid;

3-24질의

SELECT name, SUM(saleprice) AS "총 판매액" FROM Customer, Orders WHERE Customer.custid = Orders.custid Group BY Customer.name ORDER BY Customer.name;

3-25질의 

SELECT Customer.name, Book.Bookname FROM Customer, Orders, Book WHERE Customer.custid = Orders.custid AND Book.bookid = Orders.bookid;

3-26질의 

SELECT Customer.name, Book.bookname FROM Customer, Book, Orders WHERE Customer.custid = Orders.custid AND Book.bookid = Orders.bookid AND Book.price = 20000;

<외부 조인> LEFT / RIGHT ==> LEFT + 교집합 / RIGHT + 교집합 

3-27질의

SELECT Customer.name, saleprice FROM Customer LEFT OUTER JOIN Orders
ON Customer.custid = Orders.custid;

<부속 질의 Sub Query>

가장 비싼 도서의 이름은 무엇이며 얼마인가

1-1 가장 비싼책은 얼마인가?
SELECT MAX(price)
FROM book;
35000

1-2 비싼책 이름은 무엇인가?
SELECT Bookname
FROM book
WHERE price = 35000;

(1-1) + (1-2) 
SELECT Bookname FROM book WHERE price =(SELECT MAX(price) FROM book);

3-29질의 

SELECT name FROM Customer WHERE custid IN (select custid FROM Orders);

3-30질의

<집한 연산 - 고객이름의 합집합을 구하고싶다 UNION 문장과 문장을 연결>

3-32질의
SELECT name FROM customer WHERE address LIKE '대한민국%'
UNION
SELECT name FROM Customer WHERE custid IN (SELECT custid FROM Orders);

SELECT name FROM customer WHERE address LIKE '대한민국%'
UNION ALL
SELECT name FROM Customer WHERE custid IN (SELECT custid FROM Orders);
- 중복 허용

SELECT name FROM customer WHERE address LIKE '대한민국%'
AND
Name NOT IN (SELECT name FROM Customer WHERE custid IN (SELECT custid FROM Orders));

------------------------------------------------------------------------------------------------------------------------------
p. 199

1. 도서번호가 1인 도서의 이름
: select bookname from book where bookid = 1;

2. 가격이 20,000원이상인 도서의 이름은
: select bookname from book wher price >= 20000

3. 박지성의 총 구매액
: select SUM(saleprice) AS '총 구매액'
from customer, orders 
where customer.custid = orders.custid AND customer.name = '박지성';

4. 박지성이 구매한 도서의 수
: select count(*) AS '도서수'
from customer, orders 
where customer.custid = orders.custid AND customer.name = '박지성';

5. 박지성이 구매한 도서의 출판사 수
: select count(DISTINCT publisher) AS '출판사 수'
from customer, orders, book
where customer.custid = orders.custid AND orders.bookid=book.bookid
AND customer.name = '박지성';

6. 박지성이 구매한 도서의 이름, 가격, 정가와 판매가격의 차이
: select bookname, price, price-saleprice
from customer, orders, book
where customer.custid=orders.custid AND orders.bookid=book.bookid
AND customer.name = '박지성';



































